#!/usr/bin/python

#
# IMPORTS
from xml.dom.minidom import parse, Node
from optparse import OptionParser, OptionGroup
import pprint


import rpm
import yum


import urllib2
import urlparse
import os


#
# GLOBALS
tmp_path = "/tmp"
cache = []
yb = yum.YumBase()


#
# UTILITY FUNCTION
def xmltodict(xmlfile):
  doc = parse(xmlfile)

  return elementtodict(doc.documentElement)


def elementtodict(parent):
  child = parent.firstChild

  if (not child):
    return None

  # ignore whitespace and line feed crap
  while child.nodeType == Node.TEXT_NODE and not child.data.strip():
    child = child.nextSibling

  if (child.nodeType == Node.TEXT_NODE):
    return child.nodeValue

  d = {}

  while child is not None:
    if (child.nodeType == Node.ELEMENT_NODE):
      try:
        d[child.tagName]
      except KeyError:
        d[child.tagName] = []

      d[child.tagName].append(elementtodict(child))

    child = child.nextSibling

  return d


def download_temp_file(src_url, dst_url, overwrite=False):

  if dst_url is None or \
     dst_url == '':
    dst_url = src_url

  if dst_url.startswith("file:///"):
    dst_path = dst_url[7:]
  elif dst_url.startswith("ftp://") or \
       dst_url.startswith("http://"):
    dst_path = tmp_path + "/" + dst_url[dst_url.rindex('/'):]
  else:
    dst_path=dst_url


  if not os.path.exists(dst_path) or overwrite:
    print("Downloading: %s -> %s" % (src_url, dst_path))

    try:
      u = urllib2.urlopen(src_url)
      url_local_handle = open(dst_path, 'w')
      url_local_handle.write(u.read())
      url_local_handle.close()
    except urllib2.URLError, e:
      print e.reason.strerror
      return ''
    except urllib2.HTTPError, e:
      print e.args
      return ''

  return dst_path


def init():
  a = xmltodict("./rpmfusion.xml")

#  pp = pprint.PrettyPrinter(indent=2)
#  pp.pprint(a)

  cache.append(a)

def load_repoman_data():
  print xmltodict("./rpmforge.xml")



def parse_cmdline():
  parser = OptionParser(usage="%prog [options]", version="%prog 1.0")


  group = OptionGroup(parser, "Action Options")

  group.add_option("-a", "--add", dest="action_add", action="store_true", help="add a new repo")
  group.add_option("-e", "--enable", dest="action_enable", action="store_true", help="enable an existing repo")
  group.add_option("-d", "--disable", dest="action_disable", action="store_true", help="Disable an existing repo")
  group.add_option("-D", "--delete", dest="action_delete", action="store_true", help="delete an existing repo")
  group.add_option("-l", "--list", dest="action_list", action="store_true", help="list enabled repos)")
  group.add_option("--list-all", dest="action_listall", action="store_true", help="list existing repos")

  parser.add_option_group(group)


  group = OptionGroup(parser, "Manual Options")
  group.add_option("--name", dest="repo_name", help="NAME of new repo", metavar="NAME")
  group.add_option("--base", dest="repo_baseurl", help="base URL of new repo", metavar="URL")
  group.add_option("--mirror", dest="repo_mirrorurl", help="mirror list URL of new repo", metavar="URL")
  group.add_option("--gpgcheck", dest="repo_gpgcheck", help="enable GPGcheck for new repo", action="store_true")
  group.add_option("--nogpgcheck", dest="repo_gpgcheck", help="disable GPGcheck for new repo", action="store_false", default=True)
  group.add_option("--gpg", dest="repo_gpgkey", help="path to GPG key of new repo", metavar="PATH")

  parser.add_option_group(group)

  return parser.parse_args()



def add_repo(repo):

  r = format_repo(repo)

  # check for fedora people repo
  if repo.startswith("fp:"):
    return add_repo_fedora_people(repo[3:])

  # check short form cache
  for c in cache:
    if c['name'][0] == r:
      return add_repo_cache(repo, c)

  # check for RPM files
  if r[-4:] == ".rpm":
    return add_repo_rpm(repo)


  # check if it's a URL

  return 0


def format_repo(repo):

  # is URL
  if '://' in repo:
    return repo

  # short form
  elif ':' in repo:
    return repo[:repo.index(':')]

  return repo


#
# ADD METHODS

def add_repo_cache(repo, c):

  # default to all repo branches defined in the cache
  repo_filter = ['*']

  if ':' in repo:
    repo_name = repo[:repo.index(':')]
    repo_filter = repo[repo.index(':')+1:].split(',')

  else:
    repo_name = repo

  # process
  repo_filter_enable = []
  repo_filter_disable = []

  repo_source = []

  # map the requested filter to enable and disable lists
  for r in c['repos'][0]['repo']:

    aliases = set([])
    if r.has_key('alias'):
      aliases = set(r['alias'])

    if r['name'][0] in repo_filter or \
       len(set(repo_filter).intersection(aliases)) or \
       '*' in repo_filter:
      repo_filter_enable.append(r['name'][0])

      # add the source requirement if not accounted for
      if r['source'][0] not in repo_source:
        repo_source.append(r['source'][0])

    else:
      repo_filter_disable.append(r['name'][0])


  # install the sources
  if len(repo_source) == 0:
    return 1

  for s in c['sources'][0]['source']:
    if s['id'][0] in repo_source:
      if s['type'][0] == 'rpm':
        install_repo_rpm(s['url'][0], s['packagename'][0])

      elif s['type'][0] == 'file':
        install_repo_file(s['url'][0])

      else:
        print("Unknown source type: %s" % s['type'][0])

  # re-read repo configuration
#  yb.getReposFromConfig()

  # enable the repos
  for r in repo_filter_enable:
    r = yb.repos.getRepo(r)

    if r.isEnabled():
      continue

    print "Enabling: %s" % r
    r.enablePersistent()


  # disable the repos
  for r in repo_filter_disable:
    r = yb.repos.getRepo(r)

    if not r.isEnabled():
      continue

    print "Disabling: %s" % r
    r.disablePersistent()


def add_repo_fedora_people(repo):

  print "Adding fedora people repository: %s" % repo

  repo_tokens = repo.split('/')

  if len(repo_tokens) > 2:
    return 0

  repo_user = repo_tokens[0]
  repo_name = repo_tokens[1]
  repo_url = "http://repos.fedorapeople.org/repos/%s/%s/fedora-%s.repo" % ( repo_user, repo_name, repo_name)

  print "Fetching: %s" % repo_url

  install_repo_file(repo_url)

def add_repo_rpm(repo):
  pass


def add_repo_file(repo):
  pass


#
# INSTALL METHODS


def install_repo_rpm(url, package):
  print("Installing repo, via RPM, from: %s" % url)

  ts = rpm.TransactionSet()

  # trim the file name from the URL
  rpm_file = url[url.rindex('/')+1:]

  mi = ts.dbMatch('name', package)

  if ( mi ):

    if len(mi) > 1:
      print("Ambiguous package name: %s" % package)
    else:
      print("INSTALLED: %s" % package)

  else:
    print("Package NOT installed: %s" % package)

    return

    dst_path = download_temp_file(url)

    if not os.path.exists(dst_path):
      print "Error downloading file."
      return 1

    # fetch the file and store locally if required
    fd = os.open(dst_path, os.O_RDONLY)

    ts.setVSFlags(rpm._RPMVSF_NOSIGNATURES)

    try:
      h = ts.hdrFromFdno(fd)
    except rpm.error, e:
      print(e)

    os.close(fd)

    ts.addInstall(h, rpm_file, 'i')
    ts.check()
    ts.order()
    ts.run(install_repo_rpm_callback, '')


def install_repo_rpm_callback(reason, amount, total, key, client_data):
    if reason == rpm.RPMCALLBACK_INST_START:
      pass #print "Starting installation."
    elif reason == rpm.RPMCALLBACK_TRANS_STOP:
      pass #print "Transation stopping"



def install_repo_file(url):
  print("Installing repo file from: %s" % url)

  dst_path = "/etc/yum.repos.d/" + url[url.rindex('/')+1:]

  dst_path = download_temp_file(url, dst_path)

  if not os.path.exists(dst_path):
    print "Error downloading file."
    return 1

  # install into the yum repo store


#
# ENABLE/DISABLE METHODS


def enable_repo(repo):
  r = format_repo(repo)

  repo_found = False

  # check repoman short form cache
  for c in cache:
    if c['name'][0] == r:
      repo_found = True
      enable_repo_cache(repo, c)

  # check for package explicitly
  for r in yb.repos.findRepos(repo):
    print r
    repo_found = True

    if r.isEnabled():
      continue

    r.enablePersistent()

  if not repo_found:
    print "Repository does not exist."



def enable_repo_cache(repo, c):
  # default to all repo branches defined in the cache
  repo_filter = ['*']

  if ':' in repo:
    repo_name = repo[:repo.index(':')]
    repo_filter = repo[repo.index(':')+1:].split(',')

  else:
    repo_name = repo

  # process
  repo_filter_enable = []

  # map the requested filter to enable and disable lists
  for r in c['repos'][0]['repo']:

    aliases = set([])
    if r.has_key('alias'):
      aliases = set(r['alias'])

    if r['name'][0] in repo_filter or \
       len(set(repo_filter).intersection(aliases)) or \
       '*' in repo_filter:
      repo_filter_enable.append(r['name'][0])

  # enable the repos
  for r in repo_filter_enable:
    r = yb.repos.getRepo(r)

    if r.isEnabled():
      continue

    print "Enabling: %s" % r
    r.enablePersistent()


def disable_repo(repo):
  r = format_repo(repo)

  repo_found = False

  # check repoman short form cache
  for c in cache:
    if c['name'][0] == r:
      repo_found = True
      disable_repo_cache(repo, c)

  # check for package explicitly
  for r in yb.repos.findRepos(repo):
    print r
    repo_found = True

    if not r.isEnabled():
      continue

    r.disablePersistent()

  if not repo_found:
    print "Repository does not exist."



def disable_repo_cache(repo, c):
  # default to all repo branches defined in the cache
  repo_filter = ['*']

  if ':' in repo:
    repo_name = repo[:repo.index(':')]
    repo_filter = repo[repo.index(':')+1:].split(',')

  else:
    repo_name = repo

  # process
  repo_filter_disable = []

  # map the requested filter to enable and disable lists
  for r in c['repos'][0]['repo']:

    aliases = set([])
    if r.has_key('alias'):
      aliases = set(r['alias'])

    if r['name'][0] in repo_filter or \
       len(set(repo_filter).intersection(aliases)) or \
       '*' in repo_filter:
      repo_filter_disable.append(r['name'][0])

  # enable the repos
  for r in repo_filter_disable:
    r = yb.repos.getRepo(r)

    if not r.isEnabled():
      continue

    print "Disabling: %s" % r
    r.disablePersistent()


#
# DELETE METHODS
def delete_repos(repo):

  # check if repo provided by rpm

    # identify other repo files in rpm

  # check for other repos in files

  # prompt for deletion and dependencies
  pass


#
# LIST METHODS
def list_repos_enabled():
  repos = {}

  for r in yb.repos.listEnabled():
    repo_name = str(r)
    repos[repo_name] = r

  rs = repos.keys()
  rs.sort()

  max_repo_title_length = len( max(rs, key=len) ) + 2
  format_str = "%-" + str(max_repo_title_length) + "s %-10s"

  print(format_str % ("Repository", "Cost"))
  print(format_str % ("----------", "----"))
  for r in rs:
    print(format_str % (r, repos[r].cost))


def list_repos_all():
  repos = {}

  for r in yb.repos.findRepos('*'):
    repo_name = str(r)
    repos[repo_name] = r

  rs = repos.keys()
  rs.sort()

  max_repo_title_length = len( max(rs, key=len) ) + 2
  format_str = "%-" + str(max_repo_title_length) + "s %-10s %-10s"

  print(format_str % ("Repository", "Enabled", "Cost"))
  print(format_str % ("----------", "-------", "----"))

  for r in rs:
    found = "y" if repos[r].isEnabled() else "n"
    print(format_str % (r, found, repos[r].cost))

#
# MAIN

init()

# parse command line and action
(options, args) = parse_cmdline()

# check action
if options.action_list:
  list_repos_enabled()

elif options.action_listall:
  list_repos_all()

elif options.action_add:
  if os.geteuid() == 0:
    for a in args:
      add_repo(a)
  else:
    print "Adding repositories must be done by a root user."

elif options.action_disable:
  if os.geteuid() == 0:
    for a in args:
      disable_repo(a)
  else:
    print "Disabling repositories must be done by a root user."

elif options.action_delete:
  print "Deleting"

elif options.action_enable:
  if os.geteuid() == 0:
    for a in args:
      enable_repo(a)
  else:
    print "Enabling repositories must be done by a root user."




